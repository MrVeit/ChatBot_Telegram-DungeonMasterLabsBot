from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from  aiogram import types
from loader import dp


available_review_models = ["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üÜò", "–§–∏–¥–±—ç–∫", "–û—Ç–∑—ã–≤"]
available_get_products = ["–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä"]


class DialogModels(StatesGroup):
    waiting_for_review_model = State()
    waiting_for_get_product = State()

@dp.message_handler(commands=['review'])
async def review_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞:")
    await DialogModels.waiting_for_review_model.set()


async def review_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() not in available_review_models:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é '–û—Ç–∑—ã–≤—ã'")
        return
    await state.update_data(chosen_review=message.text.lower())
    await state.finish()


@dp.message_handler(command=['product'])
async def product_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Äa:")
    await DialogModels.waiting_for_get_product.set()


async def product_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() not in available_get_products:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'")
        return
    await state.update_data(chosen_producct=message.text.lower())
    await state.finish()